{"version":3,"sources":["components/Preview.js","components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","renderer","Renderer","link","href","title","text","Preview","markdown","this","props","id","dangerouslySetInnerHTML","__html","React","Component","Editor","changeText","value","onChange","e","placeholder","App","state","target","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAGAA,IAAOC,WAAW,CACdC,QAAQ,IAGZ,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAQ,SAACC,EAAMC,EAAOC,GAAd,MAAuB,mCAA4BF,EAA5B,aAAqCE,GAAS,Q,IAiBvEC,E,iLAdD,IACCC,EAAYC,KAAKC,MAAjBF,SACP,OACI,yBAAKG,GAAG,eACJ,uCACA,yBACIA,GAAG,UACHC,wBAA0B,CAACC,OAAQf,IAAOU,EAAU,CAAEP,SAAUA,Y,GAR9Da,IAAMC,WCQbC,E,iLAfD,IAAD,EAC0BP,KAAKC,MAA7BF,EADF,EACEA,SAAUS,EADZ,EACYA,WACjB,OACI,yBAAKN,GAAG,cACJ,sCACA,8BACIA,GAAG,SACHO,MAAOV,EACPW,SAAU,SAACC,GAAD,OAAMH,EAAWG,W,GAT1BN,IAAMC,WCGrBM,EAAW,y0BAyEFC,E,2MAzBbC,MAAQ,CACNf,SAAUa,G,EAGZJ,WAAa,SAACG,GACZ,IAAMd,EAAOc,EAAEI,OAAON,MACtB,EAAKO,SAAS,CACZjB,SAAUF,K,wEAKZ,OACE,yBAAKK,GAAG,gBACN,kBAAC,EAAD,CACEH,SAAUC,KAAKc,MAAMf,SACrBS,WAAYR,KAAKQ,aACnB,kBAAC,EAAD,CACET,SAAUC,KAAKc,MAAMf,gB,GAnBbM,IAAMC,WCxCJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.67f32a66.chunk.js","sourcesContent":["import React from 'react';\nimport marked from 'marked';\n\nmarked.setOptions({\n    breaks: true\n  });\n  \nconst renderer = new marked.Renderer();\nrenderer.link = ((href, title, text) => `<a target=\"_blank\" href=\"${href}\">${text}` + '</a>');\n\nclass Preview extends React.Component {\n    render() {\n        const {markdown} = this.props;\n        return (\n            <div id=\"app-preview\">\n                <h1>Preview</h1>\n                <div \n                    id=\"preview\"\n                    dangerouslySetInnerHTML= {{__html: marked(markdown, { renderer: renderer })}}>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Preview;\n  ","import React from 'react';\n\nclass Editor extends React.Component {\n    render() {\n        const {markdown, changeText} = this.props;\n        return (\n            <div id=\"app-editor\">\n                <h1>Editor</h1>\n                <textarea \n                    id=\"editor\" \n                    value={markdown}\n                    onChange={(e) =>changeText(e)}>\n                </textarea>\n            </div>\n        );\n    }\n}\n\nexport default Editor;\n  ","import React from 'react';\nimport './App.css';\nimport Preview from './components/Preview.js';\nimport Editor from './components/Editor.js';\n\nconst placeholder = \n`# Markdown Previewer\n\n## Sub-heading...\n### Another sub-heading...\n  \nSome code between 2 backticks: \\`<div></div>\\`\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \n**bold text**\n_italic text_\n**_bold and italic text_**\n~~Another text style~~.\n\nA [links](https://www.freecodecamp.com)\n> Block Quotes!\n\nTables:\n\nHeader 1 | Header 2| Header 3\n------------ | ------------- | ------------- \ncontent 1 | content 2 | content 3\ncontent 4 | content 5 | content 6\n\n- Bulleted lists:\n  - list item 1\n     - list item 2\n        - list item 3\n- list item 4\n* list item 5\n\n1. A numbered list\n1. A numbered list item\n1. A numbered list item 1\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nclass App extends React.Component {\n  state = {\n    markdown: placeholder\n  }\n\n  changeText = (e) => {\n    const text = e.target.value;\n    this.setState({\n      markdown: text\n    });\n  }\n  \n  render() {\n    return (\n      <div id=\"main-content\">\n        <Editor \n          markdown={this.state.markdown}\n          changeText={this.changeText}/>\n        <Preview \n          markdown={this.state.markdown}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}